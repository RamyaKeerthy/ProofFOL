{
  "fs1": "Premise: Bob is furry. Bob is white. Erin is blue. Erin is furry. Erin is green. Erin is nice. Erin is quiet. Fiona is quiet. Harry is green. Harry is nice. Harry is white. Furry things are quiet. All cold, nice things are quiet. White, blue things are nice. All green, quiet things are cold. All quiet things are nice. All white, cold things are blue. White, blue things are quiet. If something is blue and furry then it is green. If Bob is quiet and Bob is nice then Bob is cold. \nConclusion: Bob is not green.",
  "fs1_fol": "Predicates: Furry(x); White(x); Nice(x); Cold(x); Blue(x); Green(x); Quiet(x)\n\nPremise_First-order: Furry(Bob) ::: Bob is furry.; White(Bob) ::: Bob is white.; Blue(Erin) ::: Erin is blue.; Furry(Erin) ::: Erin is furry.; Green(Erin) ::: Erin is green.; Nice(Erin) ::: Erin is nice.; Quiet(Erin) ::: Erin is quiet.; Quiet(Fiona) ::: Fiona is quiet.; Green(Harry) ::: Harry is green.; Nice(Harry) ::: Harry is nice.; White(Harry) ::: Harry is white.; \u2200x (Furry(x) \u2192 Quiet(x)) ::: Furry things are quiet.; \u2200x (Cold(x) \u2227 Nice(x) \u2192 Quiet(x)) ::: All cold, nice things are quiet.; \u2200x (White(x) \u2227 Blue(x) \u2192 Nice(x)) ::: White, blue things are nice.; \u2200x (Green(x) \u2227 Quiet(x) \u2192 Cold(x)) ::: All green, quiet things are cold.; \u2200x (Quiet(x) \u2192 Nice(x)) ::: All quiet things are nice.; \u2200x (White(x) \u2227 Cold(x) \u2192 Blue(x)) ::: All white, cold things are blue.; \u2200x (White(x) \u2227 Blue(x) \u2192 Quiet(x)) ::: White, blue things are quiet.; \u2200x (Blue(x) \u2227 Furry(x) \u2192 Green(x)) ::: If something is blue and furry then it is green.; Quiet(Bob) \u2227 Nice(Bob) \u2192 Cold(Bob) ::: If Bob is quiet and Bob is nice then Bob is cold. \n\nConclusion_First-order: \u00acGreen(Bob) ::: Bob is not green.",
  "fs2": "Premise: The bald eagle eats the mouse. The bald eagle is not green. The lion visits the mouse. The mouse eats the lion. The mouse sees the squirrel. The mouse visits the bald eagle. The squirrel eats the bald eagle. If someone visits the bald eagle then they see the bald eagle. If someone sees the squirrel then the squirrel visits the bald eagle. If the bald eagle is green then the bald eagle is red. If someone is green and not round then they eat the squirrel. If someone sees the bald eagle then the bald eagle eats the squirrel. If someone visits the squirrel and they are kind then the squirrel is rough. If someone eats the squirrel then they visit the bald eagle. If someone sees the bald eagle then they are rough. \nConclusion: The bald eagle does not see the bald eagle.",
  "fs2_fol": "Predicates: Kind(x); Visits(x, y); Rough(x); Round(x); Red(x); Eats(x, y); Green(x); Sees(x, y)\n\nPremise_First-order: Eats(BaldEagle, Mouse) ::: The bald eagle eats the mouse.; \u00acGreen(BaldEagle) ::: The bald eagle is not green.; Visits(Lion, Mouse) ::: The lion visits the mouse.; Eats(Mouse, Lion) ::: The mouse eats the lion.; Sees(Mouse, Squirrel) ::: The mouse sees the squirrel.; Visits(Mouse, BaldEagle) ::: The mouse visits the bald eagle.; Eats(Squirrel, BaldEagle) ::: The squirrel eats the bald eagle.; \u2200x (Visits(x, BaldEagle) \u2192 Sees(x, BaldEagle)) ::: If someone visits the bald eagle then they see the bald eagle.; \u2200x (Sees(x, Squirrel) \u2192 Visits(Squirrel, BaldEagle)) ::: If someone sees the squirrel then the squirrel visits the bald eagle.; Green(BaldEagle) \u2192 Red(BaldEagle) ::: If the bald eagle is green then the bald eagle is red.; \u2200x (Green(x) \u2227 \u00acRound(x) \u2192 Eats(x, Squirrel)) ::: If someone is green and not round then they eat the squirrel.; \u2200x (Sees(x, BaldEagle) \u2192 Eats(BaldEagle, Squirrel)) ::: If someone sees the bald eagle then the bald eagle eats the squirrel.; \u2200x (Visits(x, Squirrel) \u2227 Kind(x) \u2192 Rough(Squirrel)) ::: If someone visits the squirrel and they are kind then the squirrel is rough.; \u2200x (Eats(x, Squirrel) \u2192 Visits(x, BaldEagle)) ::: If someone eats the squirrel then they visit the bald eagle.; \u2200x (Sees(x, BaldEagle) \u2192 Rough(x)) ::: If someone sees the bald eagle then they are rough. \n\nConclusion_First-order: \u00acSees(BaldEagle, BaldEagle) ::: The bald eagle does not see the bald eagle.",
  "fs3": "Premise: The cow eats the dog. The cow is not cold. The dog is rough. The squirrel does not chase the dog. The squirrel eats the dog. The squirrel is cold. The squirrel is rough. The squirrel sees the dog. The tiger chases the cow. The tiger is red. If something sees the tiger then the tiger chases the squirrel. If something chases the tiger then it is cold. If something is green then it sees the tiger. If the tiger sees the dog and the dog sees the cow then the dog sees the tiger. If something sees the tiger and it does not see the squirrel then the squirrel eats the dog. If something is green and it sees the tiger then the tiger sees the dog. If the tiger is red then the tiger is not cold. If something sees the dog then it is green. \nConclusion: The tiger does not see the tiger.",
  "fs3_fol": "Predicates: Rough(x); Red(x); Cold(x); Chases(x, y); Eats(x, y); Green(x); Sees(x, y)\n\nPremise_First-order: Eats(Cow, Dog) ::: The cow eats the dog.; \u00acCold(Cow) ::: The cow is not cold.; Rough(Dog) ::: The dog is rough.; \u00acChases(Squirrel, Dog) ::: The squirrel does not chase the dog.; Eats(Squirrel, Dog) ::: The squirrel eats the dog.; Cold(Squirrel) ::: The squirrel is cold.; Rough(Squirrel) ::: The squirrel is rough.; Sees(Squirrel, Dog) ::: The squirrel sees the dog.; Chases(Tiger, Cow) ::: The tiger chases the cow.; Red(Tiger) ::: The tiger is red.; \u2200x (Sees(x, Tiger) \u2192 Chases(Tiger, Squirrel)) ::: If something sees the tiger then the tiger chases the squirrel.; \u2200x (Chases(x, Tiger) \u2192 Cold(x)) ::: If something chases the tiger then it is cold.; \u2200x (Green(x) \u2192 Sees(x, Tiger)) ::: If something is green then it sees the tiger.; Sees(Tiger, Dog) \u2227 Sees(Dog, Cow) \u2192 Sees(Dog, Tiger) ::: If the tiger sees the dog and the dog sees the cow then the dog sees the tiger.; \u2200x (Sees(x, Tiger) \u2227 \u00acSees(x, Squirrel) \u2192 Eats(Squirrel, Dog)) ::: If something sees the tiger and it does not see the squirrel then the squirrel eats the dog.; \u2200x (Green(x) \u2227 Sees(x, Tiger) \u2192 Sees(Tiger, Dog)) ::: If something is green and it sees the tiger then the tiger sees the dog.; Red(Tiger) \u2192 \u00acCold(Tiger) ::: If the tiger is red then the tiger is not cold.; \u2200x (Sees(x, Dog) \u2192 Green(x)) ::: If something sees the dog then it is green. \n\nConclusion_First-order: \u00acSees(Tiger, Tiger) ::: The tiger does not see the tiger."
}